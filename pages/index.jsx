//NextJS imports
import Head from 'next/head'
import Image from 'next/image'

//CSS imports
import styles from '../styles/Home.module.css'

//GraphQL/Apollo imports
import {ApolloClient, InMemoryCache, gql} from '@apollo/client'

//React imports
import { useRef } from 'react'

//PrimeReact imports
import {Card} from 'primereact/card';
import {Button} from 'primereact/button';
import {Chip} from 'primereact/chip';
import {DataTable} from 'primereact/datatable';
import {Column} from 'primereact/column';
import { Fragment } from 'react';

export default function Home({characters}) {
  console.log('characters', characters);


  //Testing export
  const dt = useRef(null);

  const exportData = (selectionOnly) => {
    dt.current.exportCSV({ selectionOnly });
}

  return (
    <Fragment>
      <style></style>
    <div className={styles.container}>
      <Head>
        <title>Star Wars Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
        Star Wars Characters
        </h1>

        <p className={styles.description}>
          Experimenting with using GraphQL and NextJS with PrimeReact
        </p>

        <div className={styles.grid}>

          {characters.map(character =>{
            return(
                
                <Card key={character.name} className="card" >

                    <div className="surface-0">
                        <div className="font-medium text-3xl text-900 mb-3">{character.name}</div>
                        <div className="text-500 mb-5">Future Description</div>
                        <ul className="list-none p-0 m-0">
                            <li className="flex align-items-center py-3 px-2 border-top-1 border-300 flex-wrap">
                                <div className="text-500 w-6 md:w-2 font-medium">Birth Year</div>
                                <div className="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">{character.birthYear}</div>
                            </li>
                            <li className="flex align-items-center py-3 px-2 border-top-1 border-300 flex-wrap">
                                <div className="text-500 w-6 md:w-2 font-medium">Films</div>
                                <div className="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">
                                    {/* {character.filmConnection.films.(film=>{
                                      return(<Chip key={film.title}>Does this work? {film.title}</Chip>)
                                    })} */}
                                    <ul>
                                    {character.filmConnection.films.map(film=>{
                                      return(<Chip key={film.title} label={film.title} icon="pi pi-star"></Chip>)
                                    })}
                                    </ul>
                                    
                                </div>
                            </li>
                            <li className="flex align-items-center py-3 px-2 border-top-1 border-300 flex-wrap" >
                                <div className="text-500 w-6 md:w-2 font-medium">Hair Color</div>
                                <div className="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">{character.hairColor}</div>
                            </li>
                            <li className="flex align-items-center py-3 px-2 border-top-1 border-300 flex-wrap">
                                <div className="text-500 w-6 md:w-2 font-medium">Height (cm)</div>
                                <div className="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">{character.height}</div>
                            </li>
                            <li className="flex align-items-center py-3 px-2 border-top-1 border-bottom-1 border-300 flex-wrap">
                                <div className="text-500 w-6 md:w-2 font-medium">Plot</div>
                                <div className="text-900 w-full md:w-4 md:flex-order-0 flex-order-1">
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div>
                            </li>
                        </ul>
                    </div>
    
                </Card>
            )
          })}
        </div>
      
      <h1>
          Star Wars Info but in DataTable Form
      </h1>
      
      <Card>
        <div style={{textAlign:'left'}}>
          <Button type="button" icon="pi pi-external-link" iconPos="left" label="CSV" onClick={() => exportData()}></Button>
        </div>
        <DataTable value={characters} size="large" ref={dt}>
            <Column header="(Name): " field="name" sortable></Column>
            <Column header="(Date of Birth): " field="birthYear"></Column>
            <Column header="(Hair Color): " field="hairColor"></Column>
            <Column header="(Height): " field="height" sortable></Column>
        </DataTable>
        
      </Card>
      
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
    </Fragment>
  )
}

export async function getStaticProps(){

  const client = new ApolloClient({
    uri:'http://localhost:50772/',
    cache: new InMemoryCache
  })

  const {data} = await client.query({
    query: gql`
    
      query GetPeople{
        allPeople(first:10){
          people{
            filmConnection{
              films{
                title
              }
            },
            name,
            birthYear,
            hairColor,
            height,
            starshipConnection{
              starships{
                name
              }
            }
            
          }
        }
      }

    `
  })


  console.log('data', data);

  return {
    props: {
      characters: data.allPeople.people,
    }
  }
}